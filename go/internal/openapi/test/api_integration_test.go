/*
Svix API

Testing IntegrationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_IntegrationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IntegrationAPIService V1IntegrationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationCreate(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var integId string

		httpRes, err := apiClient.IntegrationAPI.V1IntegrationDelete(context.Background(), appId, integId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var integId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationGet(context.Background(), appId, integId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationGetKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var integId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationGetKey(context.Background(), appId, integId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationList(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationRotateKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var integId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationRotateKey(context.Background(), appId, integId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService V1IntegrationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var integId string

		resp, httpRes, err := apiClient.IntegrationAPI.V1IntegrationUpdate(context.Background(), appId, integId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
