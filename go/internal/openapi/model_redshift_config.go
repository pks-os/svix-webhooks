/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RedshiftConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RedshiftConfig{}

// RedshiftConfig Configuration parameters for defining a Redshift sink.
type RedshiftConfig struct {
	AccessKeyId string `json:"accessKeyId"`
	ClusterIdentifier string `json:"clusterIdentifier"`
	// Database name.  Only required if not using transformations.
	DbName *string `json:"dbName,omitempty"`
	DbUser string `json:"dbUser"`
	Region string `json:"region"`
	// Schema name.  Only used if not using transformations.
	SchemaName NullableString `json:"schemaName,omitempty"`
	SecretAccessKey string `json:"secretAccessKey"`
	// Table name.  Only required if not using transformations.
	TableName *string `json:"tableName,omitempty"`
}

type _RedshiftConfig RedshiftConfig

// NewRedshiftConfig instantiates a new RedshiftConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedshiftConfig(accessKeyId string, clusterIdentifier string, dbUser string, region string, secretAccessKey string) *RedshiftConfig {
	this := RedshiftConfig{}
	this.AccessKeyId = accessKeyId
	this.ClusterIdentifier = clusterIdentifier
	this.DbUser = dbUser
	this.Region = region
	this.SecretAccessKey = secretAccessKey
	return &this
}

// NewRedshiftConfigWithDefaults instantiates a new RedshiftConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedshiftConfigWithDefaults() *RedshiftConfig {
	this := RedshiftConfig{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
func (o *RedshiftConfig) GetAccessKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKeyId, true
}

// SetAccessKeyId sets field value
func (o *RedshiftConfig) SetAccessKeyId(v string) {
	o.AccessKeyId = v
}

// GetClusterIdentifier returns the ClusterIdentifier field value
func (o *RedshiftConfig) GetClusterIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterIdentifier
}

// GetClusterIdentifierOk returns a tuple with the ClusterIdentifier field value
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetClusterIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterIdentifier, true
}

// SetClusterIdentifier sets field value
func (o *RedshiftConfig) SetClusterIdentifier(v string) {
	o.ClusterIdentifier = v
}

// GetDbName returns the DbName field value if set, zero value otherwise.
func (o *RedshiftConfig) GetDbName() string {
	if o == nil || IsNil(o.DbName) {
		var ret string
		return ret
	}
	return *o.DbName
}

// GetDbNameOk returns a tuple with the DbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetDbNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbName) {
		return nil, false
	}
	return o.DbName, true
}

// HasDbName returns a boolean if a field has been set.
func (o *RedshiftConfig) HasDbName() bool {
	if o != nil && !IsNil(o.DbName) {
		return true
	}

	return false
}

// SetDbName gets a reference to the given string and assigns it to the DbName field.
func (o *RedshiftConfig) SetDbName(v string) {
	o.DbName = &v
}

// GetDbUser returns the DbUser field value
func (o *RedshiftConfig) GetDbUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbUser
}

// GetDbUserOk returns a tuple with the DbUser field value
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetDbUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbUser, true
}

// SetDbUser sets field value
func (o *RedshiftConfig) SetDbUser(v string) {
	o.DbUser = v
}

// GetRegion returns the Region field value
func (o *RedshiftConfig) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *RedshiftConfig) SetRegion(v string) {
	o.Region = v
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RedshiftConfig) GetSchemaName() string {
	if o == nil || IsNil(o.SchemaName.Get()) {
		var ret string
		return ret
	}
	return *o.SchemaName.Get()
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RedshiftConfig) GetSchemaNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SchemaName.Get(), o.SchemaName.IsSet()
}

// HasSchemaName returns a boolean if a field has been set.
func (o *RedshiftConfig) HasSchemaName() bool {
	if o != nil && o.SchemaName.IsSet() {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given NullableString and assigns it to the SchemaName field.
func (o *RedshiftConfig) SetSchemaName(v string) {
	o.SchemaName.Set(&v)
}
// SetSchemaNameNil sets the value for SchemaName to be an explicit nil
func (o *RedshiftConfig) SetSchemaNameNil() {
	o.SchemaName.Set(nil)
}

// UnsetSchemaName ensures that no value is present for SchemaName, not even an explicit nil
func (o *RedshiftConfig) UnsetSchemaName() {
	o.SchemaName.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value
func (o *RedshiftConfig) GetSecretAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretAccessKey, true
}

// SetSecretAccessKey sets field value
func (o *RedshiftConfig) SetSecretAccessKey(v string) {
	o.SecretAccessKey = v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *RedshiftConfig) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedshiftConfig) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *RedshiftConfig) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *RedshiftConfig) SetTableName(v string) {
	o.TableName = &v
}

func (o RedshiftConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RedshiftConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKeyId"] = o.AccessKeyId
	toSerialize["clusterIdentifier"] = o.ClusterIdentifier
	if !IsNil(o.DbName) {
		toSerialize["dbName"] = o.DbName
	}
	toSerialize["dbUser"] = o.DbUser
	toSerialize["region"] = o.Region
	if o.SchemaName.IsSet() {
		toSerialize["schemaName"] = o.SchemaName.Get()
	}
	toSerialize["secretAccessKey"] = o.SecretAccessKey
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	return toSerialize, nil
}

func (o *RedshiftConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessKeyId",
		"clusterIdentifier",
		"dbUser",
		"region",
		"secretAccessKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRedshiftConfig := _RedshiftConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRedshiftConfig)

	if err != nil {
		return err
	}

	*o = RedshiftConfig(varRedshiftConfig)

	return err
}

type NullableRedshiftConfig struct {
	value *RedshiftConfig
	isSet bool
}

func (v NullableRedshiftConfig) Get() *RedshiftConfig {
	return v.value
}

func (v *NullableRedshiftConfig) Set(val *RedshiftConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRedshiftConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRedshiftConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedshiftConfig(val *RedshiftConfig) *NullableRedshiftConfig {
	return &NullableRedshiftConfig{value: val, isSet: true}
}

func (v NullableRedshiftConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedshiftConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


