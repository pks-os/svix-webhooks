/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventTypeExampleOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTypeExampleOut{}

// EventTypeExampleOut struct for EventTypeExampleOut
type EventTypeExampleOut struct {
	Example map[string]interface{} `json:"example"`
}

type _EventTypeExampleOut EventTypeExampleOut

// NewEventTypeExampleOut instantiates a new EventTypeExampleOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeExampleOut(example map[string]interface{}) *EventTypeExampleOut {
	this := EventTypeExampleOut{}
	this.Example = example
	return &this
}

// NewEventTypeExampleOutWithDefaults instantiates a new EventTypeExampleOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeExampleOutWithDefaults() *EventTypeExampleOut {
	this := EventTypeExampleOut{}
	return &this
}

// GetExample returns the Example field value
func (o *EventTypeExampleOut) GetExample() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Example
}

// GetExampleOk returns a tuple with the Example field value
// and a boolean to check if the value has been set.
func (o *EventTypeExampleOut) GetExampleOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Example, true
}

// SetExample sets field value
func (o *EventTypeExampleOut) SetExample(v map[string]interface{}) {
	o.Example = v
}

func (o EventTypeExampleOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTypeExampleOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["example"] = o.Example
	return toSerialize, nil
}

func (o *EventTypeExampleOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"example",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventTypeExampleOut := _EventTypeExampleOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventTypeExampleOut)

	if err != nil {
		return err
	}

	*o = EventTypeExampleOut(varEventTypeExampleOut)

	return err
}

type NullableEventTypeExampleOut struct {
	value *EventTypeExampleOut
	isSet bool
}

func (v NullableEventTypeExampleOut) Get() *EventTypeExampleOut {
	return v.value
}

func (v *NullableEventTypeExampleOut) Set(val *EventTypeExampleOut) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeExampleOut) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeExampleOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeExampleOut(val *EventTypeExampleOut) *NullableEventTypeExampleOut {
	return &NullableEventTypeExampleOut{value: val, isSet: true}
}

func (v NullableEventTypeExampleOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeExampleOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


