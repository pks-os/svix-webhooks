/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SinkInOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinkInOneOf{}

// SinkInOneOf struct for SinkInOneOf
type SinkInOneOf struct {
	RoutingKey string `json:"routingKey"`
	Type string `json:"type"`
	Uri string `json:"uri"`
}

type _SinkInOneOf SinkInOneOf

// NewSinkInOneOf instantiates a new SinkInOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkInOneOf(routingKey string, type_ string, uri string) *SinkInOneOf {
	this := SinkInOneOf{}
	this.RoutingKey = routingKey
	this.Type = type_
	this.Uri = uri
	return &this
}

// NewSinkInOneOfWithDefaults instantiates a new SinkInOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkInOneOfWithDefaults() *SinkInOneOf {
	this := SinkInOneOf{}
	return &this
}

// GetRoutingKey returns the RoutingKey field value
func (o *SinkInOneOf) GetRoutingKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf) GetRoutingKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoutingKey, true
}

// SetRoutingKey sets field value
func (o *SinkInOneOf) SetRoutingKey(v string) {
	o.RoutingKey = v
}

// GetType returns the Type field value
func (o *SinkInOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SinkInOneOf) SetType(v string) {
	o.Type = v
}

// GetUri returns the Uri field value
func (o *SinkInOneOf) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *SinkInOneOf) SetUri(v string) {
	o.Uri = v
}

func (o SinkInOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinkInOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["routingKey"] = o.RoutingKey
	toSerialize["type"] = o.Type
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *SinkInOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"routingKey",
		"type",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinkInOneOf := _SinkInOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinkInOneOf)

	if err != nil {
		return err
	}

	*o = SinkInOneOf(varSinkInOneOf)

	return err
}

type NullableSinkInOneOf struct {
	value *SinkInOneOf
	isSet bool
}

func (v NullableSinkInOneOf) Get() *SinkInOneOf {
	return v.value
}

func (v *NullableSinkInOneOf) Set(val *SinkInOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkInOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkInOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkInOneOf(val *SinkInOneOf) *NullableSinkInOneOf {
	return &NullableSinkInOneOf{value: val, isSet: true}
}

func (v NullableSinkInOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkInOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


