/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageAttemptFailingEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageAttemptFailingEvent{}

// MessageAttemptFailingEvent Sent after a message has been failing for a few times. It's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.
type MessageAttemptFailingEvent struct {
	Data MessageAttemptFailingEventData `json:"data"`
	Type string `json:"type"`
}

type _MessageAttemptFailingEvent MessageAttemptFailingEvent

// NewMessageAttemptFailingEvent instantiates a new MessageAttemptFailingEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAttemptFailingEvent(data MessageAttemptFailingEventData, type_ string) *MessageAttemptFailingEvent {
	this := MessageAttemptFailingEvent{}
	this.Data = data
	this.Type = type_
	return &this
}

// NewMessageAttemptFailingEventWithDefaults instantiates a new MessageAttemptFailingEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAttemptFailingEventWithDefaults() *MessageAttemptFailingEvent {
	this := MessageAttemptFailingEvent{}
	var type_ string = "message.attempt.failing"
	this.Type = type_
	return &this
}

// GetData returns the Data field value
func (o *MessageAttemptFailingEvent) GetData() MessageAttemptFailingEventData {
	if o == nil {
		var ret MessageAttemptFailingEventData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptFailingEvent) GetDataOk() (*MessageAttemptFailingEventData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MessageAttemptFailingEvent) SetData(v MessageAttemptFailingEventData) {
	o.Data = v
}

// GetType returns the Type field value
func (o *MessageAttemptFailingEvent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptFailingEvent) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageAttemptFailingEvent) SetType(v string) {
	o.Type = v
}

func (o MessageAttemptFailingEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageAttemptFailingEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *MessageAttemptFailingEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageAttemptFailingEvent := _MessageAttemptFailingEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageAttemptFailingEvent)

	if err != nil {
		return err
	}

	*o = MessageAttemptFailingEvent(varMessageAttemptFailingEvent)

	return err
}

type NullableMessageAttemptFailingEvent struct {
	value *MessageAttemptFailingEvent
	isSet bool
}

func (v NullableMessageAttemptFailingEvent) Get() *MessageAttemptFailingEvent {
	return v.value
}

func (v *NullableMessageAttemptFailingEvent) Set(val *MessageAttemptFailingEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAttemptFailingEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAttemptFailingEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAttemptFailingEvent(val *MessageAttemptFailingEvent) *NullableMessageAttemptFailingEvent {
	return &NullableMessageAttemptFailingEvent{value: val, isSet: true}
}

func (v NullableMessageAttemptFailingEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAttemptFailingEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


