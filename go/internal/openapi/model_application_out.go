/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ApplicationOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationOut{}

// ApplicationOut struct for ApplicationOut
type ApplicationOut struct {
	CreatedAt time.Time `json:"createdAt"`
	// The app's ID
	Id string `json:"id"`
	Metadata map[string]string `json:"metadata"`
	Name string `json:"name"`
	RateLimit *int32 `json:"rateLimit,omitempty"`
	// The app's UID
	Uid *string `json:"uid,omitempty" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type _ApplicationOut ApplicationOut

// NewApplicationOut instantiates a new ApplicationOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationOut(createdAt time.Time, id string, metadata map[string]string, name string, updatedAt time.Time) *ApplicationOut {
	this := ApplicationOut{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Metadata = metadata
	this.Name = name
	this.UpdatedAt = updatedAt
	return &this
}

// NewApplicationOutWithDefaults instantiates a new ApplicationOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationOutWithDefaults() *ApplicationOut {
	this := ApplicationOut{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *ApplicationOut) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ApplicationOut) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *ApplicationOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApplicationOut) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value
func (o *ApplicationOut) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetMetadataOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ApplicationOut) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *ApplicationOut) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationOut) SetName(v string) {
	o.Name = v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise.
func (o *ApplicationOut) GetRateLimit() int32 {
	if o == nil || IsNil(o.RateLimit) {
		var ret int32
		return ret
	}
	return *o.RateLimit
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetRateLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RateLimit) {
		return nil, false
	}
	return o.RateLimit, true
}

// HasRateLimit returns a boolean if a field has been set.
func (o *ApplicationOut) HasRateLimit() bool {
	if o != nil && !IsNil(o.RateLimit) {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given int32 and assigns it to the RateLimit field.
func (o *ApplicationOut) SetRateLimit(v int32) {
	o.RateLimit = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *ApplicationOut) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *ApplicationOut) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *ApplicationOut) SetUid(v string) {
	o.Uid = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ApplicationOut) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ApplicationOut) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ApplicationOut) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ApplicationOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	if !IsNil(o.RateLimit) {
		toSerialize["rateLimit"] = o.RateLimit
	}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ApplicationOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"id",
		"metadata",
		"name",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationOut := _ApplicationOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApplicationOut)

	if err != nil {
		return err
	}

	*o = ApplicationOut(varApplicationOut)

	return err
}

type NullableApplicationOut struct {
	value *ApplicationOut
	isSet bool
}

func (v NullableApplicationOut) Get() *ApplicationOut {
	return v.value
}

func (v *NullableApplicationOut) Set(val *ApplicationOut) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationOut) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationOut(val *ApplicationOut) *NullableApplicationOut {
	return &NullableApplicationOut{value: val, isSet: true}
}

func (v NullableApplicationOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


