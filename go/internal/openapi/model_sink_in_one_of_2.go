/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SinkInOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinkInOneOf2{}

// SinkInOneOf2 struct for SinkInOneOf2
type SinkInOneOf2 struct {
	Brokers string `json:"brokers"`
	// Password for SASL, if `security_protocol` is `sasl-ssl`.
	SaslPassword NullableString `json:"saslPassword,omitempty"`
	// Username for SASL, if `security_protocol` is `sasl-ssl`.
	SaslUsername NullableString `json:"saslUsername,omitempty"`
	SecurityProtocol KafkaSecurityProtocolType `json:"securityProtocol"`
	Topic string `json:"topic"`
	Type string `json:"type"`
}

type _SinkInOneOf2 SinkInOneOf2

// NewSinkInOneOf2 instantiates a new SinkInOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkInOneOf2(brokers string, securityProtocol KafkaSecurityProtocolType, topic string, type_ string) *SinkInOneOf2 {
	this := SinkInOneOf2{}
	this.Brokers = brokers
	this.SecurityProtocol = securityProtocol
	this.Topic = topic
	this.Type = type_
	return &this
}

// NewSinkInOneOf2WithDefaults instantiates a new SinkInOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkInOneOf2WithDefaults() *SinkInOneOf2 {
	this := SinkInOneOf2{}
	return &this
}

// GetBrokers returns the Brokers field value
func (o *SinkInOneOf2) GetBrokers() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Brokers
}

// GetBrokersOk returns a tuple with the Brokers field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf2) GetBrokersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Brokers, true
}

// SetBrokers sets field value
func (o *SinkInOneOf2) SetBrokers(v string) {
	o.Brokers = v
}

// GetSaslPassword returns the SaslPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SinkInOneOf2) GetSaslPassword() string {
	if o == nil || IsNil(o.SaslPassword.Get()) {
		var ret string
		return ret
	}
	return *o.SaslPassword.Get()
}

// GetSaslPasswordOk returns a tuple with the SaslPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SinkInOneOf2) GetSaslPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaslPassword.Get(), o.SaslPassword.IsSet()
}

// HasSaslPassword returns a boolean if a field has been set.
func (o *SinkInOneOf2) HasSaslPassword() bool {
	if o != nil && o.SaslPassword.IsSet() {
		return true
	}

	return false
}

// SetSaslPassword gets a reference to the given NullableString and assigns it to the SaslPassword field.
func (o *SinkInOneOf2) SetSaslPassword(v string) {
	o.SaslPassword.Set(&v)
}
// SetSaslPasswordNil sets the value for SaslPassword to be an explicit nil
func (o *SinkInOneOf2) SetSaslPasswordNil() {
	o.SaslPassword.Set(nil)
}

// UnsetSaslPassword ensures that no value is present for SaslPassword, not even an explicit nil
func (o *SinkInOneOf2) UnsetSaslPassword() {
	o.SaslPassword.Unset()
}

// GetSaslUsername returns the SaslUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SinkInOneOf2) GetSaslUsername() string {
	if o == nil || IsNil(o.SaslUsername.Get()) {
		var ret string
		return ret
	}
	return *o.SaslUsername.Get()
}

// GetSaslUsernameOk returns a tuple with the SaslUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SinkInOneOf2) GetSaslUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaslUsername.Get(), o.SaslUsername.IsSet()
}

// HasSaslUsername returns a boolean if a field has been set.
func (o *SinkInOneOf2) HasSaslUsername() bool {
	if o != nil && o.SaslUsername.IsSet() {
		return true
	}

	return false
}

// SetSaslUsername gets a reference to the given NullableString and assigns it to the SaslUsername field.
func (o *SinkInOneOf2) SetSaslUsername(v string) {
	o.SaslUsername.Set(&v)
}
// SetSaslUsernameNil sets the value for SaslUsername to be an explicit nil
func (o *SinkInOneOf2) SetSaslUsernameNil() {
	o.SaslUsername.Set(nil)
}

// UnsetSaslUsername ensures that no value is present for SaslUsername, not even an explicit nil
func (o *SinkInOneOf2) UnsetSaslUsername() {
	o.SaslUsername.Unset()
}

// GetSecurityProtocol returns the SecurityProtocol field value
func (o *SinkInOneOf2) GetSecurityProtocol() KafkaSecurityProtocolType {
	if o == nil {
		var ret KafkaSecurityProtocolType
		return ret
	}

	return o.SecurityProtocol
}

// GetSecurityProtocolOk returns a tuple with the SecurityProtocol field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf2) GetSecurityProtocolOk() (*KafkaSecurityProtocolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecurityProtocol, true
}

// SetSecurityProtocol sets field value
func (o *SinkInOneOf2) SetSecurityProtocol(v KafkaSecurityProtocolType) {
	o.SecurityProtocol = v
}

// GetTopic returns the Topic field value
func (o *SinkInOneOf2) GetTopic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf2) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *SinkInOneOf2) SetTopic(v string) {
	o.Topic = v
}

// GetType returns the Type field value
func (o *SinkInOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SinkInOneOf2) SetType(v string) {
	o.Type = v
}

func (o SinkInOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinkInOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["brokers"] = o.Brokers
	if o.SaslPassword.IsSet() {
		toSerialize["saslPassword"] = o.SaslPassword.Get()
	}
	if o.SaslUsername.IsSet() {
		toSerialize["saslUsername"] = o.SaslUsername.Get()
	}
	toSerialize["securityProtocol"] = o.SecurityProtocol
	toSerialize["topic"] = o.Topic
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *SinkInOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"brokers",
		"securityProtocol",
		"topic",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinkInOneOf2 := _SinkInOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSinkInOneOf2)

	if err != nil {
		return err
	}

	*o = SinkInOneOf2(varSinkInOneOf2)

	return err
}

type NullableSinkInOneOf2 struct {
	value *SinkInOneOf2
	isSet bool
}

func (v NullableSinkInOneOf2) Get() *SinkInOneOf2 {
	return v.value
}

func (v *NullableSinkInOneOf2) Set(val *SinkInOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkInOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkInOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkInOneOf2(val *SinkInOneOf2) *NullableSinkInOneOf2 {
	return &NullableSinkInOneOf2{value: val, isSet: true}
}

func (v NullableSinkInOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkInOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


