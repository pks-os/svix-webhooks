/*
Svix API

Testing EndpointAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_EndpointAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EndpointAPIService V1EndpointCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointCreate(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		httpRes, err := apiClient.EndpointAPI.V1EndpointDelete(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointGet(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointGetHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointGetHeaders(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointGetSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointGetSecret(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointGetStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointGetStats(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointList(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointPatch(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointPatchHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		httpRes, err := apiClient.EndpointAPI.V1EndpointPatchHeaders(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointRecover", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointRecover(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointReplay", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointReplay(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointRotateSecret", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		httpRes, err := apiClient.EndpointAPI.V1EndpointRotateSecret(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointSendExample", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointSendExample(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointTransformationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointTransformationGet(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointTransformationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		httpRes, err := apiClient.EndpointAPI.V1EndpointTransformationPartialUpdate(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointTransformationSimulate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointTransformationSimulate(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.EndpointAPI.V1EndpointUpdate(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EndpointAPIService V1EndpointUpdateHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		httpRes, err := apiClient.EndpointAPI.V1EndpointUpdateHeaders(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
