/*
Svix API

Testing TransformationTemplateAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_TransformationTemplateAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transformationTemplateId string

		httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateDelete(context.Background(), transformationTemplateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateGenerate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateGenerate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transformationTemplateId string

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateGet(context.Background(), transformationTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateOauthDiscord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateOauthDiscord(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateOauthSlack", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateOauthSlack(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplatePatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transformationTemplateId string

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplatePatch(context.Background(), transformationTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateSimulate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateSimulate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TransformationTemplateAPIService V1TransformationTemplateUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transformationTemplateId string

		resp, httpRes, err := apiClient.TransformationTemplateAPI.V1TransformationTemplateUpdate(context.Background(), transformationTemplateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
