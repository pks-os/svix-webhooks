/*
Svix API

Testing EventTypeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_EventTypeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EventTypeAPIService V1EventTypeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		httpRes, err := apiClient.EventTypeAPI.V1EventTypeDelete(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeExportOpenapi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeExportOpenapi(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeGenerateExample", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeGenerateExample(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeGet(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeGetRetrySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeGetRetrySchedule(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeImportOpenapi", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeImportOpenapi(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypePatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypePatch(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeUpdate(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EventTypeAPIService V1EventTypeUpdateRetrySchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var eventTypeName string

		resp, httpRes, err := apiClient.EventTypeAPI.V1EventTypeUpdateRetrySchedule(context.Background(), eventTypeName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
