/*
Svix API

Testing MessageAttemptAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_MessageAttemptAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MessageAttemptAPIService V1MessageAttemptExpungeContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string
		var attemptId string

		httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptExpungeContent(context.Background(), appId, msgId, attemptId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string
		var attemptId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptGet(context.Background(), appId, msgId, attemptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptGetHeaders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string
		var attemptId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptGetHeaders(context.Background(), appId, msgId, attemptId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListAttemptedDestinations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListAttemptedDestinations(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListAttemptedMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListAttemptedMessages(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListByEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListByEndpoint(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListByEndpointDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string
		var endpointId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListByEndpointDeprecated(context.Background(), appId, msgId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListByMsg", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListByMsg(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptListByMsgDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		resp, httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptListByMsgDeprecated(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAttemptAPIService V1MessageAttemptResend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string
		var endpointId string

		httpRes, err := apiClient.MessageAttemptAPI.V1MessageAttemptResend(context.Background(), appId, msgId, endpointId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
