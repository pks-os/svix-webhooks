/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EnvironmentOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentOut{}

// EnvironmentOut struct for EnvironmentOut
type EnvironmentOut struct {
	CreatedAt time.Time `json:"createdAt"`
	EventTypes []EventTypeOut `json:"eventTypes"`
	Settings *SettingsOut `json:"settings,omitempty"`
	TransformationTemplates []TemplateOut `json:"transformationTemplates"`
	Version *int32 `json:"version,omitempty"`
}

type _EnvironmentOut EnvironmentOut

// NewEnvironmentOut instantiates a new EnvironmentOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentOut(createdAt time.Time, eventTypes []EventTypeOut, transformationTemplates []TemplateOut) *EnvironmentOut {
	this := EnvironmentOut{}
	this.CreatedAt = createdAt
	this.EventTypes = eventTypes
	this.TransformationTemplates = transformationTemplates
	var version int32 = 1
	this.Version = &version
	return &this
}

// NewEnvironmentOutWithDefaults instantiates a new EnvironmentOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentOutWithDefaults() *EnvironmentOut {
	this := EnvironmentOut{}
	var version int32 = 1
	this.Version = &version
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *EnvironmentOut) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentOut) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EnvironmentOut) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEventTypes returns the EventTypes field value
func (o *EnvironmentOut) GetEventTypes() []EventTypeOut {
	if o == nil {
		var ret []EventTypeOut
		return ret
	}

	return o.EventTypes
}

// GetEventTypesOk returns a tuple with the EventTypes field value
// and a boolean to check if the value has been set.
func (o *EnvironmentOut) GetEventTypesOk() ([]EventTypeOut, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTypes, true
}

// SetEventTypes sets field value
func (o *EnvironmentOut) SetEventTypes(v []EventTypeOut) {
	o.EventTypes = v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *EnvironmentOut) GetSettings() SettingsOut {
	if o == nil || IsNil(o.Settings) {
		var ret SettingsOut
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentOut) GetSettingsOk() (*SettingsOut, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *EnvironmentOut) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given SettingsOut and assigns it to the Settings field.
func (o *EnvironmentOut) SetSettings(v SettingsOut) {
	o.Settings = &v
}

// GetTransformationTemplates returns the TransformationTemplates field value
func (o *EnvironmentOut) GetTransformationTemplates() []TemplateOut {
	if o == nil {
		var ret []TemplateOut
		return ret
	}

	return o.TransformationTemplates
}

// GetTransformationTemplatesOk returns a tuple with the TransformationTemplates field value
// and a boolean to check if the value has been set.
func (o *EnvironmentOut) GetTransformationTemplatesOk() ([]TemplateOut, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransformationTemplates, true
}

// SetTransformationTemplates sets field value
func (o *EnvironmentOut) SetTransformationTemplates(v []TemplateOut) {
	o.TransformationTemplates = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EnvironmentOut) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentOut) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EnvironmentOut) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *EnvironmentOut) SetVersion(v int32) {
	o.Version = &v
}

func (o EnvironmentOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["eventTypes"] = o.EventTypes
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	toSerialize["transformationTemplates"] = o.TransformationTemplates
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

func (o *EnvironmentOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"createdAt",
		"eventTypes",
		"transformationTemplates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentOut := _EnvironmentOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvironmentOut)

	if err != nil {
		return err
	}

	*o = EnvironmentOut(varEnvironmentOut)

	return err
}

type NullableEnvironmentOut struct {
	value *EnvironmentOut
	isSet bool
}

func (v NullableEnvironmentOut) Get() *EnvironmentOut {
	return v.value
}

func (v *NullableEnvironmentOut) Set(val *EnvironmentOut) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentOut) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentOut(val *EnvironmentOut) *NullableEnvironmentOut {
	return &NullableEnvironmentOut{value: val, isSet: true}
}

func (v NullableEnvironmentOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


