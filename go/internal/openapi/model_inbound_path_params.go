/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InboundPathParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InboundPathParams{}

// InboundPathParams struct for InboundPathParams
type InboundPathParams struct {
	// The app's ID or UID
	AppId string `json:"app_id" validate:"regexp=^[a-zA-Z0-9\\\\-_.]+$"`
	InboundToken string `json:"inbound_token"`
}

type _InboundPathParams InboundPathParams

// NewInboundPathParams instantiates a new InboundPathParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInboundPathParams(appId string, inboundToken string) *InboundPathParams {
	this := InboundPathParams{}
	this.AppId = appId
	this.InboundToken = inboundToken
	return &this
}

// NewInboundPathParamsWithDefaults instantiates a new InboundPathParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInboundPathParamsWithDefaults() *InboundPathParams {
	this := InboundPathParams{}
	return &this
}

// GetAppId returns the AppId field value
func (o *InboundPathParams) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *InboundPathParams) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *InboundPathParams) SetAppId(v string) {
	o.AppId = v
}

// GetInboundToken returns the InboundToken field value
func (o *InboundPathParams) GetInboundToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InboundToken
}

// GetInboundTokenOk returns a tuple with the InboundToken field value
// and a boolean to check if the value has been set.
func (o *InboundPathParams) GetInboundTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InboundToken, true
}

// SetInboundToken sets field value
func (o *InboundPathParams) SetInboundToken(v string) {
	o.InboundToken = v
}

func (o InboundPathParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InboundPathParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app_id"] = o.AppId
	toSerialize["inbound_token"] = o.InboundToken
	return toSerialize, nil
}

func (o *InboundPathParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"app_id",
		"inbound_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInboundPathParams := _InboundPathParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInboundPathParams)

	if err != nil {
		return err
	}

	*o = InboundPathParams(varInboundPathParams)

	return err
}

type NullableInboundPathParams struct {
	value *InboundPathParams
	isSet bool
}

func (v NullableInboundPathParams) Get() *InboundPathParams {
	return v.value
}

func (v *NullableInboundPathParams) Set(val *InboundPathParams) {
	v.value = val
	v.isSet = true
}

func (v NullableInboundPathParams) IsSet() bool {
	return v.isSet
}

func (v *NullableInboundPathParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInboundPathParams(val *InboundPathParams) *NullableInboundPathParams {
	return &NullableInboundPathParams{value: val, isSet: true}
}

func (v NullableInboundPathParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInboundPathParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


