/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClientSecretJwtParamsIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientSecretJwtParamsIn{}

// ClientSecretJwtParamsIn struct for ClientSecretJwtParamsIn
type ClientSecretJwtParamsIn struct {
	// The base64-encoded secret used for signing the JWT.
	SecretBase64 string `json:"secretBase64"`
	// Optional secret identifier. If supplied, this will be populated in the JWT header in the `kid` field.
	SecretId *string `json:"secretId,omitempty"`
	SigningAlgorithm OauthJwsSigningAlgorithm `json:"signingAlgorithm"`
	// Optional number of seconds after which the JWT should expire. Defaults to 300 seconds.
	TokenExpirySecs *int32 `json:"tokenExpirySecs,omitempty"`
}

type _ClientSecretJwtParamsIn ClientSecretJwtParamsIn

// NewClientSecretJwtParamsIn instantiates a new ClientSecretJwtParamsIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientSecretJwtParamsIn(secretBase64 string, signingAlgorithm OauthJwsSigningAlgorithm) *ClientSecretJwtParamsIn {
	this := ClientSecretJwtParamsIn{}
	this.SecretBase64 = secretBase64
	this.SigningAlgorithm = signingAlgorithm
	return &this
}

// NewClientSecretJwtParamsInWithDefaults instantiates a new ClientSecretJwtParamsIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientSecretJwtParamsInWithDefaults() *ClientSecretJwtParamsIn {
	this := ClientSecretJwtParamsIn{}
	return &this
}

// GetSecretBase64 returns the SecretBase64 field value
func (o *ClientSecretJwtParamsIn) GetSecretBase64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretBase64
}

// GetSecretBase64Ok returns a tuple with the SecretBase64 field value
// and a boolean to check if the value has been set.
func (o *ClientSecretJwtParamsIn) GetSecretBase64Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretBase64, true
}

// SetSecretBase64 sets field value
func (o *ClientSecretJwtParamsIn) SetSecretBase64(v string) {
	o.SecretBase64 = v
}

// GetSecretId returns the SecretId field value if set, zero value otherwise.
func (o *ClientSecretJwtParamsIn) GetSecretId() string {
	if o == nil || IsNil(o.SecretId) {
		var ret string
		return ret
	}
	return *o.SecretId
}

// GetSecretIdOk returns a tuple with the SecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientSecretJwtParamsIn) GetSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.SecretId) {
		return nil, false
	}
	return o.SecretId, true
}

// HasSecretId returns a boolean if a field has been set.
func (o *ClientSecretJwtParamsIn) HasSecretId() bool {
	if o != nil && !IsNil(o.SecretId) {
		return true
	}

	return false
}

// SetSecretId gets a reference to the given string and assigns it to the SecretId field.
func (o *ClientSecretJwtParamsIn) SetSecretId(v string) {
	o.SecretId = &v
}

// GetSigningAlgorithm returns the SigningAlgorithm field value
func (o *ClientSecretJwtParamsIn) GetSigningAlgorithm() OauthJwsSigningAlgorithm {
	if o == nil {
		var ret OauthJwsSigningAlgorithm
		return ret
	}

	return o.SigningAlgorithm
}

// GetSigningAlgorithmOk returns a tuple with the SigningAlgorithm field value
// and a boolean to check if the value has been set.
func (o *ClientSecretJwtParamsIn) GetSigningAlgorithmOk() (*OauthJwsSigningAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SigningAlgorithm, true
}

// SetSigningAlgorithm sets field value
func (o *ClientSecretJwtParamsIn) SetSigningAlgorithm(v OauthJwsSigningAlgorithm) {
	o.SigningAlgorithm = v
}

// GetTokenExpirySecs returns the TokenExpirySecs field value if set, zero value otherwise.
func (o *ClientSecretJwtParamsIn) GetTokenExpirySecs() int32 {
	if o == nil || IsNil(o.TokenExpirySecs) {
		var ret int32
		return ret
	}
	return *o.TokenExpirySecs
}

// GetTokenExpirySecsOk returns a tuple with the TokenExpirySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientSecretJwtParamsIn) GetTokenExpirySecsOk() (*int32, bool) {
	if o == nil || IsNil(o.TokenExpirySecs) {
		return nil, false
	}
	return o.TokenExpirySecs, true
}

// HasTokenExpirySecs returns a boolean if a field has been set.
func (o *ClientSecretJwtParamsIn) HasTokenExpirySecs() bool {
	if o != nil && !IsNil(o.TokenExpirySecs) {
		return true
	}

	return false
}

// SetTokenExpirySecs gets a reference to the given int32 and assigns it to the TokenExpirySecs field.
func (o *ClientSecretJwtParamsIn) SetTokenExpirySecs(v int32) {
	o.TokenExpirySecs = &v
}

func (o ClientSecretJwtParamsIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientSecretJwtParamsIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["secretBase64"] = o.SecretBase64
	if !IsNil(o.SecretId) {
		toSerialize["secretId"] = o.SecretId
	}
	toSerialize["signingAlgorithm"] = o.SigningAlgorithm
	if !IsNil(o.TokenExpirySecs) {
		toSerialize["tokenExpirySecs"] = o.TokenExpirySecs
	}
	return toSerialize, nil
}

func (o *ClientSecretJwtParamsIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secretBase64",
		"signingAlgorithm",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClientSecretJwtParamsIn := _ClientSecretJwtParamsIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClientSecretJwtParamsIn)

	if err != nil {
		return err
	}

	*o = ClientSecretJwtParamsIn(varClientSecretJwtParamsIn)

	return err
}

type NullableClientSecretJwtParamsIn struct {
	value *ClientSecretJwtParamsIn
	isSet bool
}

func (v NullableClientSecretJwtParamsIn) Get() *ClientSecretJwtParamsIn {
	return v.value
}

func (v *NullableClientSecretJwtParamsIn) Set(val *ClientSecretJwtParamsIn) {
	v.value = val
	v.isSet = true
}

func (v NullableClientSecretJwtParamsIn) IsSet() bool {
	return v.isSet
}

func (v *NullableClientSecretJwtParamsIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientSecretJwtParamsIn(val *ClientSecretJwtParamsIn) *NullableClientSecretJwtParamsIn {
	return &NullableClientSecretJwtParamsIn{value: val, isSet: true}
}

func (v NullableClientSecretJwtParamsIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientSecretJwtParamsIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


