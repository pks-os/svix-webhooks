/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageAttemptHeadersOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageAttemptHeadersOut{}

// MessageAttemptHeadersOut struct for MessageAttemptHeadersOut
type MessageAttemptHeadersOut struct {
	ResponseHeaders [][]string `json:"responseHeaders,omitempty"`
	Sensitive []string `json:"sensitive"`
	SentHeaders map[string]string `json:"sentHeaders"`
}

type _MessageAttemptHeadersOut MessageAttemptHeadersOut

// NewMessageAttemptHeadersOut instantiates a new MessageAttemptHeadersOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageAttemptHeadersOut(sensitive []string, sentHeaders map[string]string) *MessageAttemptHeadersOut {
	this := MessageAttemptHeadersOut{}
	this.Sensitive = sensitive
	this.SentHeaders = sentHeaders
	return &this
}

// NewMessageAttemptHeadersOutWithDefaults instantiates a new MessageAttemptHeadersOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageAttemptHeadersOutWithDefaults() *MessageAttemptHeadersOut {
	this := MessageAttemptHeadersOut{}
	return &this
}

// GetResponseHeaders returns the ResponseHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageAttemptHeadersOut) GetResponseHeaders() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}
	return o.ResponseHeaders
}

// GetResponseHeadersOk returns a tuple with the ResponseHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageAttemptHeadersOut) GetResponseHeadersOk() ([][]string, bool) {
	if o == nil || IsNil(o.ResponseHeaders) {
		return nil, false
	}
	return o.ResponseHeaders, true
}

// HasResponseHeaders returns a boolean if a field has been set.
func (o *MessageAttemptHeadersOut) HasResponseHeaders() bool {
	if o != nil && !IsNil(o.ResponseHeaders) {
		return true
	}

	return false
}

// SetResponseHeaders gets a reference to the given [][]string and assigns it to the ResponseHeaders field.
func (o *MessageAttemptHeadersOut) SetResponseHeaders(v [][]string) {
	o.ResponseHeaders = v
}

// GetSensitive returns the Sensitive field value
func (o *MessageAttemptHeadersOut) GetSensitive() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptHeadersOut) GetSensitiveOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sensitive, true
}

// SetSensitive sets field value
func (o *MessageAttemptHeadersOut) SetSensitive(v []string) {
	o.Sensitive = v
}

// GetSentHeaders returns the SentHeaders field value
func (o *MessageAttemptHeadersOut) GetSentHeaders() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.SentHeaders
}

// GetSentHeadersOk returns a tuple with the SentHeaders field value
// and a boolean to check if the value has been set.
func (o *MessageAttemptHeadersOut) GetSentHeadersOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SentHeaders, true
}

// SetSentHeaders sets field value
func (o *MessageAttemptHeadersOut) SetSentHeaders(v map[string]string) {
	o.SentHeaders = v
}

func (o MessageAttemptHeadersOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageAttemptHeadersOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ResponseHeaders != nil {
		toSerialize["responseHeaders"] = o.ResponseHeaders
	}
	toSerialize["sensitive"] = o.Sensitive
	toSerialize["sentHeaders"] = o.SentHeaders
	return toSerialize, nil
}

func (o *MessageAttemptHeadersOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sensitive",
		"sentHeaders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageAttemptHeadersOut := _MessageAttemptHeadersOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageAttemptHeadersOut)

	if err != nil {
		return err
	}

	*o = MessageAttemptHeadersOut(varMessageAttemptHeadersOut)

	return err
}

type NullableMessageAttemptHeadersOut struct {
	value *MessageAttemptHeadersOut
	isSet bool
}

func (v NullableMessageAttemptHeadersOut) Get() *MessageAttemptHeadersOut {
	return v.value
}

func (v *NullableMessageAttemptHeadersOut) Set(val *MessageAttemptHeadersOut) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAttemptHeadersOut) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAttemptHeadersOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAttemptHeadersOut(val *MessageAttemptHeadersOut) *NullableMessageAttemptHeadersOut {
	return &NullableMessageAttemptHeadersOut{value: val, isSet: true}
}

func (v NullableMessageAttemptHeadersOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAttemptHeadersOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


