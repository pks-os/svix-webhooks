/*
Svix API

Testing MessageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_MessageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MessageAPIService CreateMessageAttemptForEndpoint", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var endpointId string

		resp, httpRes, err := apiClient.MessageAPI.CreateMessageAttemptForEndpoint(context.Background(), appId, endpointId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.MessageAPI.V1MessageCreate(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageExpungeContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		httpRes, err := apiClient.MessageAPI.V1MessageExpungeContent(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		resp, httpRes, err := apiClient.MessageAPI.V1MessageGet(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageGetRawPayload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string
		var msgId string

		resp, httpRes, err := apiClient.MessageAPI.V1MessageGetRawPayload(context.Background(), appId, msgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.MessageAPI.V1MessageList(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageAPIService V1MessageStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appId string

		resp, httpRes, err := apiClient.MessageAPI.V1MessageStream(context.Background(), appId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
