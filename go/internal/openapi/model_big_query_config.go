/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BigQueryConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BigQueryConfig{}

// BigQueryConfig Configuration for a Google Cloud BigQuery sink.
type BigQueryConfig struct {
	// Google Cloud Credentials JSON Object as a string.
	Credentials string `json:"credentials"`
	DatasetId string `json:"datasetId"`
	ProjectId string `json:"projectId"`
	TableId string `json:"tableId"`
}

type _BigQueryConfig BigQueryConfig

// NewBigQueryConfig instantiates a new BigQueryConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigQueryConfig(credentials string, datasetId string, projectId string, tableId string) *BigQueryConfig {
	this := BigQueryConfig{}
	this.Credentials = credentials
	this.DatasetId = datasetId
	this.ProjectId = projectId
	this.TableId = tableId
	return &this
}

// NewBigQueryConfigWithDefaults instantiates a new BigQueryConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigQueryConfigWithDefaults() *BigQueryConfig {
	this := BigQueryConfig{}
	return &this
}

// GetCredentials returns the Credentials field value
func (o *BigQueryConfig) GetCredentials() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *BigQueryConfig) GetCredentialsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *BigQueryConfig) SetCredentials(v string) {
	o.Credentials = v
}

// GetDatasetId returns the DatasetId field value
func (o *BigQueryConfig) GetDatasetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatasetId
}

// GetDatasetIdOk returns a tuple with the DatasetId field value
// and a boolean to check if the value has been set.
func (o *BigQueryConfig) GetDatasetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatasetId, true
}

// SetDatasetId sets field value
func (o *BigQueryConfig) SetDatasetId(v string) {
	o.DatasetId = v
}

// GetProjectId returns the ProjectId field value
func (o *BigQueryConfig) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *BigQueryConfig) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *BigQueryConfig) SetProjectId(v string) {
	o.ProjectId = v
}

// GetTableId returns the TableId field value
func (o *BigQueryConfig) GetTableId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableId
}

// GetTableIdOk returns a tuple with the TableId field value
// and a boolean to check if the value has been set.
func (o *BigQueryConfig) GetTableIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableId, true
}

// SetTableId sets field value
func (o *BigQueryConfig) SetTableId(v string) {
	o.TableId = v
}

func (o BigQueryConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BigQueryConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["credentials"] = o.Credentials
	toSerialize["datasetId"] = o.DatasetId
	toSerialize["projectId"] = o.ProjectId
	toSerialize["tableId"] = o.TableId
	return toSerialize, nil
}

func (o *BigQueryConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentials",
		"datasetId",
		"projectId",
		"tableId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBigQueryConfig := _BigQueryConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBigQueryConfig)

	if err != nil {
		return err
	}

	*o = BigQueryConfig(varBigQueryConfig)

	return err
}

type NullableBigQueryConfig struct {
	value *BigQueryConfig
	isSet bool
}

func (v NullableBigQueryConfig) Get() *BigQueryConfig {
	return v.value
}

func (v *NullableBigQueryConfig) Set(val *BigQueryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBigQueryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBigQueryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigQueryConfig(val *BigQueryConfig) *NullableBigQueryConfig {
	return &NullableBigQueryConfig{value: val, isSet: true}
}

func (v NullableBigQueryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigQueryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


