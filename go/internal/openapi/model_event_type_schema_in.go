/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventTypeSchemaIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventTypeSchemaIn{}

// EventTypeSchemaIn struct for EventTypeSchemaIn
type EventTypeSchemaIn struct {
	Schema map[string]interface{} `json:"schema"`
}

type _EventTypeSchemaIn EventTypeSchemaIn

// NewEventTypeSchemaIn instantiates a new EventTypeSchemaIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeSchemaIn(schema map[string]interface{}) *EventTypeSchemaIn {
	this := EventTypeSchemaIn{}
	this.Schema = schema
	return &this
}

// NewEventTypeSchemaInWithDefaults instantiates a new EventTypeSchemaIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeSchemaInWithDefaults() *EventTypeSchemaIn {
	this := EventTypeSchemaIn{}
	return &this
}

// GetSchema returns the Schema field value
func (o *EventTypeSchemaIn) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *EventTypeSchemaIn) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *EventTypeSchemaIn) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

func (o EventTypeSchemaIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventTypeSchemaIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schema"] = o.Schema
	return toSerialize, nil
}

func (o *EventTypeSchemaIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schema",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventTypeSchemaIn := _EventTypeSchemaIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventTypeSchemaIn)

	if err != nil {
		return err
	}

	*o = EventTypeSchemaIn(varEventTypeSchemaIn)

	return err
}

type NullableEventTypeSchemaIn struct {
	value *EventTypeSchemaIn
	isSet bool
}

func (v NullableEventTypeSchemaIn) Get() *EventTypeSchemaIn {
	return v.value
}

func (v *NullableEventTypeSchemaIn) Set(val *EventTypeSchemaIn) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeSchemaIn) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeSchemaIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeSchemaIn(val *EventTypeSchemaIn) *NullableEventTypeSchemaIn {
	return &NullableEventTypeSchemaIn{value: val, isSet: true}
}

func (v NullableEventTypeSchemaIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeSchemaIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


