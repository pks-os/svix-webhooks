/*
Svix API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OAuthPayloadIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthPayloadIn{}

// OAuthPayloadIn struct for OAuthPayloadIn
type OAuthPayloadIn struct {
	Code string `json:"code"`
	RedirectUri string `json:"redirectUri"`
}

type _OAuthPayloadIn OAuthPayloadIn

// NewOAuthPayloadIn instantiates a new OAuthPayloadIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthPayloadIn(code string, redirectUri string) *OAuthPayloadIn {
	this := OAuthPayloadIn{}
	this.Code = code
	this.RedirectUri = redirectUri
	return &this
}

// NewOAuthPayloadInWithDefaults instantiates a new OAuthPayloadIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthPayloadInWithDefaults() *OAuthPayloadIn {
	this := OAuthPayloadIn{}
	return &this
}

// GetCode returns the Code field value
func (o *OAuthPayloadIn) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *OAuthPayloadIn) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *OAuthPayloadIn) SetCode(v string) {
	o.Code = v
}

// GetRedirectUri returns the RedirectUri field value
func (o *OAuthPayloadIn) GetRedirectUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedirectUri
}

// GetRedirectUriOk returns a tuple with the RedirectUri field value
// and a boolean to check if the value has been set.
func (o *OAuthPayloadIn) GetRedirectUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedirectUri, true
}

// SetRedirectUri sets field value
func (o *OAuthPayloadIn) SetRedirectUri(v string) {
	o.RedirectUri = v
}

func (o OAuthPayloadIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthPayloadIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["redirectUri"] = o.RedirectUri
	return toSerialize, nil
}

func (o *OAuthPayloadIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"redirectUri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuthPayloadIn := _OAuthPayloadIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOAuthPayloadIn)

	if err != nil {
		return err
	}

	*o = OAuthPayloadIn(varOAuthPayloadIn)

	return err
}

type NullableOAuthPayloadIn struct {
	value *OAuthPayloadIn
	isSet bool
}

func (v NullableOAuthPayloadIn) Get() *OAuthPayloadIn {
	return v.value
}

func (v *NullableOAuthPayloadIn) Set(val *OAuthPayloadIn) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthPayloadIn) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthPayloadIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthPayloadIn(val *OAuthPayloadIn) *NullableOAuthPayloadIn {
	return &NullableOAuthPayloadIn{value: val, isSet: true}
}

func (v NullableOAuthPayloadIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthPayloadIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


